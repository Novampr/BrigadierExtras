plugins {
    id 'java'
}

version = rootProject.mod_version
group = rootProject.maven_group

configurations {
    shadowBundle {
        canBeResolved = true
        canBeConsumed = false
    }
}

base {
    archivesName = rootProject.archives_base_name + "-Velocity"
}

compileJava {
    options.compilerArgs << '-parameters'
}

tasks.build.dependsOn tasks.shadowJar

repositories {
    mavenCentral()
    maven {
        name = "papermc-repo"
        url = "https://repo.papermc.io/repository/maven-public/"
    }
    maven {
        name = "sonatype"
        url = "https://oss.sonatype.org/content/groups/public/"
    }
}

dependencies {
    compileOnly("com.velocitypowered:velocity-api:${rootProject.velocity_api_version}")
    annotationProcessor("com.velocitypowered:velocity-api:${rootProject.velocity_api_version}")

    implementation(shadowBundle(project(path: ":")))
}

def targetJavaVersion = 21
java {
    toolchain.languageVersion = JavaLanguageVersion.of(targetJavaVersion)
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
    options.release.set(targetJavaVersion)
}

jar {
    destinationDirectory = file("$rootProject.rootDir/dev_output")

    archiveClassifier = 'dev'
}

shadowJar {
    destinationDirectory = file("$rootProject.rootDir/output")

    configurations = [project.configurations.shadowBundle]
    archiveClassifier = ''
}

def templateSource = file('src/main/templates')
def templateDest = layout.buildDirectory.dir('generated/sources/templates')
def generateTemplates = tasks.register('generateTemplates', Copy) { task ->
    def props = [
            'version': rootProject.mod_version
    ]
    task.inputs.properties props

    task.from templateSource
    task.into templateDest
    task.expand props
}

sourceSets.main.java.srcDir(generateTemplates.map { it.outputs })

rootProject.idea.project.settings.taskTriggers.afterSync generateTemplates
rootProject.eclipse.synchronizationTasks(generateTemplates)
