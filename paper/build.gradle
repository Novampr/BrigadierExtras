plugins {
    id 'java'
}

version = rootProject.mod_version
group = rootProject.maven_group

configurations {
    shadowBundle {
        canBeResolved = true
        canBeConsumed = false
    }
}

base {
    archivesName = rootProject.archives_base_name + "-Paper"
}

compileJava {
    options.compilerArgs << '-parameters'
}

tasks.build.dependsOn tasks.shadowJar

repositories {
    mavenCentral()
    maven {
        name = "papermc-repo"
        url = "https://repo.papermc.io/repository/maven-public/"
    }
    maven {
        name = "sonatype"
        url = "https://oss.sonatype.org/content/groups/public/"
    }
}

dependencies {
    compileOnly("io.papermc.paper:paper-api:${rootProject.paper_api_version}")

    implementation(shadowBundle(project(path: ":")))
}

def targetJavaVersion = 21
java {
    def javaVersion = JavaVersion.toVersion(targetJavaVersion)
    sourceCompatibility = javaVersion
    targetCompatibility = javaVersion
    if (JavaVersion.current() < javaVersion) {
        toolchain.languageVersion = JavaLanguageVersion.of(targetJavaVersion)
    }
}

jar {
    destinationDirectory = file("$rootProject.rootDir/dev_output")

    archiveClassifier = 'dev'
}

shadowJar {
    destinationDirectory = file("$rootProject.rootDir/output")

    configurations = [project.configurations.shadowBundle]
    archiveClassifier = ''
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'

    if (targetJavaVersion >= 10 || JavaVersion.current().isJava10Compatible()) {
        options.release.set(targetJavaVersion)
    }
}

processResources {
    def props = [version: version]
    inputs.properties props
    filteringCharset 'UTF-8'
    filesMatching('paper-plugin.yml') {
        expand props
    }
}
