plugins {
    id 'maven-publish'
}

version = rootProject.mod_version
group = rootProject.maven_group

// Loom is defined in the root build.gradle
loom {
    accessWidenerPath = file("src/main/resources/brigadierextras.accesswidener")
}

configurations {
    shadowBundle {
        canBeResolved = true
        canBeConsumed = false
    }
}

base {
    archivesName = rootProject.archives_base_name + "-Fabric"
}

repositories {

}

compileJava {
    options.compilerArgs << '-parameters'
}

dependencies {
    minecraft "com.mojang:minecraft:${rootProject.minecraft_version}"
    mappings loom.officialMojangMappings()
    modImplementation "net.fabricmc:fabric-loader:${rootProject.fabric_loader_version}"

    modImplementation "net.fabricmc.fabric-api:fabric-api:${rootProject.fabric_api_version}"

    implementation(shadowBundle(project(path: ":")))

    include(modImplementation('me.lucko:fabric-permissions-api:0.3.1'))
}

processResources {
    inputs.property "version", project.version
    inputs.property "minecraft_version", project.minecraft_version
    inputs.property "loader_version", project.fabric_loader_version
    filteringCharset "UTF-8"

    filesMatching("fabric.mod.json") {
        expand "version": project.version,
                "minecraft_version": project.minecraft_version,
                "loader_version": project.fabric_loader_version
    }
}

def targetJavaVersion = 21
tasks.withType(JavaCompile).configureEach {
    it.options.encoding = "UTF-8"
    if (targetJavaVersion >= 10 || JavaVersion.current().isJava10Compatible()) {
        it.options.release.set(targetJavaVersion)
    }
}

java {
    def javaVersion = JavaVersion.toVersion(targetJavaVersion)
    if (JavaVersion.current() < javaVersion) {
        toolchain.languageVersion = JavaLanguageVersion.of(targetJavaVersion)
    }
    withSourcesJar()
}

jar {
    destinationDirectory = file("$rootProject.rootDir/dev_output")

    archiveClassifier = 'dev'
}

shadowJar {
    destinationDirectory = file("$rootProject.rootDir/dev_output")

    configurations = [project.configurations.shadowBundle]
    archiveClassifier = 'dev-shadow'
}

remapJar {
    input.set shadowJar.archiveFile
    destinationDirectory = file("$rootProject.rootDir/output")
}